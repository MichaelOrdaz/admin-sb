/* tslint:disable */
/* eslint-disable */
/**
 * SB documentacion
 * Documentacion para api resful s&b
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 *
 * @export
 * @interface Activity
 */
export interface Activity {
    /**
     *
     * @type {number}
     * @memberof Activity
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof Activity
     */
    'name': string;
    /**
     *
     * @type {number}
     * @memberof Activity
     */
    'percentage': number;
    /**
     *
     * @type {Client}
     * @memberof Activity
     */
    'client': Client;
    /**
     *
     * @type {string}
     * @memberof Activity
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof Activity
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof Activity
     */
    'deletedAt': string;
}
/**
 *
 * @export
 * @interface AuthControllerGetProfile200Response
 */
export interface AuthControllerGetProfile200Response {
    /**
     *
     * @type {AuthControllerGetProfile200ResponseData}
     * @memberof AuthControllerGetProfile200Response
     */
    'data'?: AuthControllerGetProfile200ResponseData;
}
/**
 *
 * @export
 * @interface AuthControllerGetProfile200ResponseData
 */
export interface AuthControllerGetProfile200ResponseData {
    /**
     *
     * @type {User}
     * @memberof AuthControllerGetProfile200ResponseData
     */
    'user'?: User;
}
/**
 *
 * @export
 * @interface AuthControllerLogin200Response
 */
export interface AuthControllerLogin200Response {
    /**
     *
     * @type {AuthControllerLogin200ResponseData}
     * @memberof AuthControllerLogin200Response
     */
    'data'?: AuthControllerLogin200ResponseData;
}
/**
 *
 * @export
 * @interface AuthControllerLogin200ResponseData
 */
export interface AuthControllerLogin200ResponseData {
    /**
     *
     * @type {User}
     * @memberof AuthControllerLogin200ResponseData
     */
    'user'?: User;
    /**
     *
     * @type {string}
     * @memberof AuthControllerLogin200ResponseData
     */
    'access_token'?: string;
}
/**
 *
 * @export
 * @interface AuthControllerLogin400Response
 */
export interface AuthControllerLogin400Response {
    /**
     *
     * @type {number}
     * @memberof AuthControllerLogin400Response
     */
    'statusCode'?: number;
    /**
     *
     * @type {}
     * @memberof AuthControllerLogin400Response
     */
    'message'?: any;
    /**
     *
     * @type {string}
     * @memberof AuthControllerLogin400Response
     */
    'error'?: string;
}
/**
 *
 * @export
 * @interface Client
 */
export interface Client {
    /**
     *
     * @type {number}
     * @memberof Client
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof Client
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof Client
     */
    'paternalSurname': string;
    /**
     *
     * @type {string}
     * @memberof Client
     */
    'maternalSurname': string;
    /**
     *
     * @type {string}
     * @memberof Client
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof Client
     */
    'phone': string;
    /**
     *
     * @type {string}
     * @memberof Client
     */
    'rfc': string;
    /**
     *
     * @type {string}
     * @memberof Client
     */
    'curp': string;
    /**
     *
     * @type {string}
     * @memberof Client
     */
    'street': string;
    /**
     *
     * @type {string}
     * @memberof Client
     */
    'outdoorNumber': string;
    /**
     *
     * @type {string}
     * @memberof Client
     */
    'interiorNumber': string;
    /**
     *
     * @type {string}
     * @memberof Client
     */
    'cologne': string;
    /**
     *
     * @type {string}
     * @memberof Client
     */
    'postalCode': string;
    /**
     *
     * @type {string}
     * @memberof Client
     */
    'province': string;
    /**
     *
     * @type {string}
     * @memberof Client
     */
    'state': string;
    /**
     *
     * @type {Array<Activity>}
     * @memberof Client
     */
    'activities': Array<Activity>;
    /**
     *
     * @type {Array<Regime>}
     * @memberof Client
     */
    'regimes': Array<Regime>;
    /**
     *
     * @type {string}
     * @memberof Client
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof Client
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof Client
     */
    'deletedAt': string;
}
/**
 *
 * @export
 * @interface ClientActivitiesDto
 */
export interface ClientActivitiesDto {
    /**
     *
     * @type {string}
     * @memberof ClientActivitiesDto
     */
    'name': string;
    /**
     *
     * @type {number}
     * @memberof ClientActivitiesDto
     */
    'percentage': number;
}
/**
 *
 * @export
 * @interface ClientsControllerCreateClient201Response
 */
export interface ClientsControllerCreateClient201Response {
    /**
     *
     * @type {ClientsControllerCreateClient201ResponseData}
     * @memberof ClientsControllerCreateClient201Response
     */
    'data'?: ClientsControllerCreateClient201ResponseData;
}
/**
 *
 * @export
 * @interface ClientsControllerCreateClient201ResponseData
 */
export interface ClientsControllerCreateClient201ResponseData {
    /**
     *
     * @type {Client}
     * @memberof ClientsControllerCreateClient201ResponseData
     */
    'client'?: Client;
}
/**
 *
 * @export
 * @interface ClientsControllerFindClients200Response
 */
export interface ClientsControllerFindClients200Response {
    /**
     *
     * @type {ClientsControllerFindClients200ResponseData}
     * @memberof ClientsControllerFindClients200Response
     */
    'data'?: ClientsControllerFindClients200ResponseData;
}
/**
 *
 * @export
 * @interface ClientsControllerFindClients200ResponseData
 */
export interface ClientsControllerFindClients200ResponseData {
    /**
     *
     * @type {Array<Client>}
     * @memberof ClientsControllerFindClients200ResponseData
     */
    'client'?: Array<Client>;
}
/**
 *
 * @export
 * @interface CreateClientDto
 */
export interface CreateClientDto {
    /**
     *
     * @type {string}
     * @memberof CreateClientDto
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof CreateClientDto
     */
    'paternalSurname': string;
    /**
     *
     * @type {string}
     * @memberof CreateClientDto
     */
    'maternalSurname': string;
    /**
     *
     * @type {string}
     * @memberof CreateClientDto
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof CreateClientDto
     */
    'phone': string;
    /**
     *
     * @type {string}
     * @memberof CreateClientDto
     */
    'rfc': string;
    /**
     *
     * @type {string}
     * @memberof CreateClientDto
     */
    'curp': string;
    /**
     *
     * @type {string}
     * @memberof CreateClientDto
     */
    'street': string;
    /**
     *
     * @type {string}
     * @memberof CreateClientDto
     */
    'outdoorNumber': string;
    /**
     *
     * @type {string}
     * @memberof CreateClientDto
     */
    'interiorNumber': string;
    /**
     *
     * @type {string}
     * @memberof CreateClientDto
     */
    'cologne': string;
    /**
     *
     * @type {string}
     * @memberof CreateClientDto
     */
    'postalCode': string;
    /**
     *
     * @type {string}
     * @memberof CreateClientDto
     */
    'province': string;
    /**
     *
     * @type {string}
     * @memberof CreateClientDto
     */
    'state': string;
    /**
     *
     * @type {Array<number>}
     * @memberof CreateClientDto
     */
    'regimes': Array<number>;
    /**
     *
     * @type {Array<ClientActivitiesDto>}
     * @memberof CreateClientDto
     */
    'activities': Array<ClientActivitiesDto>;
}
/**
 *
 * @export
 * @interface LoginDto
 */
export interface LoginDto {
    /**
     *
     * @type {string}
     * @memberof LoginDto
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof LoginDto
     */
    'password': string;
}
/**
 *
 * @export
 * @interface Regime
 */
export interface Regime {
    /**
     *
     * @type {number}
     * @memberof Regime
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof Regime
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof Regime
     */
    'key': string;
    /**
     *
     * @type {Array<Client>}
     * @memberof Regime
     */
    'clients': Array<Client>;
    /**
     *
     * @type {string}
     * @memberof Regime
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof Regime
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof Regime
     */
    'deletedAt': string;
}
/**
 *
 * @export
 * @interface RegimeControllerFindAllRegimes200Response
 */
export interface RegimeControllerFindAllRegimes200Response {
    /**
     *
     * @type {RegimeControllerFindAllRegimes200ResponseData}
     * @memberof RegimeControllerFindAllRegimes200Response
     */
    'data'?: RegimeControllerFindAllRegimes200ResponseData;
}
/**
 *
 * @export
 * @interface RegimeControllerFindAllRegimes200ResponseData
 */
export interface RegimeControllerFindAllRegimes200ResponseData {
    /**
     *
     * @type {Array<Regime>}
     * @memberof RegimeControllerFindAllRegimes200ResponseData
     */
    'regimes'?: Array<Regime>;
}
/**
 *
 * @export
 * @interface RegimeControllerFindOneRegime200Response
 */
export interface RegimeControllerFindOneRegime200Response {
    /**
     *
     * @type {RegimeControllerFindOneRegime200ResponseData}
     * @memberof RegimeControllerFindOneRegime200Response
     */
    'data'?: RegimeControllerFindOneRegime200ResponseData;
}
/**
 *
 * @export
 * @interface RegimeControllerFindOneRegime200ResponseData
 */
export interface RegimeControllerFindOneRegime200ResponseData {
    /**
     *
     * @type {Regime}
     * @memberof RegimeControllerFindOneRegime200ResponseData
     */
    'regime'?: Regime;
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
    /**
     *
     * @type {number}
     * @memberof User
     */
    'id': number;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'paternalSurname': string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'maternalSurname': string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'email': string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'password': string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'phone': string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'role': string;
    /**
     *
     * @type {boolean}
     * @memberof User
     */
    'active': boolean;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'createdAt': string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'updatedAt': string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'deletedAt': string;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerBothRoles: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * endpoint para obtener los datos del usuario en sesion
         * @summary
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGetProfile: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * endpoint para autenticacion de usuario, se espera recibir un email y un password en el body de tipo json
         * @summary
         * @param {LoginDto} loginDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin: async (loginDto: LoginDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginDto' is not null or undefined
            assertParamExists('authControllerLogin', 'loginDto', loginDto)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerOnlyAdmin: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/admin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerOnlyOperativo: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/operational`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerBothRoles(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerBothRoles(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * endpoint para obtener los datos del usuario en sesion
         * @summary
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerGetProfile(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthControllerGetProfile200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerGetProfile(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * endpoint para autenticacion de usuario, se espera recibir un email y un password en el body de tipo json
         * @summary
         * @param {LoginDto} loginDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerLogin(loginDto: LoginDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthControllerLogin200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerLogin(loginDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerOnlyAdmin(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerOnlyAdmin(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerOnlyOperativo(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerOnlyOperativo(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerBothRoles(options?: any): AxiosPromise<void> {
            return localVarFp.authControllerBothRoles(options).then((request) => request(axios, basePath));
        },
        /**
         * endpoint para obtener los datos del usuario en sesion
         * @summary
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGetProfile(options?: any): AxiosPromise<AuthControllerGetProfile200Response> {
            return localVarFp.authControllerGetProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * endpoint para autenticacion de usuario, se espera recibir un email y un password en el body de tipo json
         * @summary
         * @param {LoginDto} loginDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin(loginDto: LoginDto, options?: any): AxiosPromise<AuthControllerLogin200Response> {
            return localVarFp.authControllerLogin(loginDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerOnlyAdmin(options?: any): AxiosPromise<void> {
            return localVarFp.authControllerOnlyAdmin(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerOnlyOperativo(options?: any): AxiosPromise<void> {
            return localVarFp.authControllerOnlyOperativo(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerBothRoles(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerBothRoles(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * endpoint para obtener los datos del usuario en sesion
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerGetProfile(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerGetProfile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * endpoint para autenticacion de usuario, se espera recibir un email y un password en el body de tipo json
     * @summary
     * @param {LoginDto} loginDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerLogin(loginDto: LoginDto, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerLogin(loginDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerOnlyAdmin(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerOnlyAdmin(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerOnlyOperativo(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerOnlyOperativo(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ClientesApi - axios parameter creator
 * @export
 */
export const ClientesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {CreateClientDto} createClientDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsControllerCreateClient: async (createClientDto: CreateClientDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createClientDto' is not null or undefined
            assertParamExists('clientsControllerCreateClient', 'createClientDto', createClientDto)
            const localVarPath = `/clients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createClientDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsControllerFindClients: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/clients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} clientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsControllerFindOneClient: async (clientId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('clientsControllerFindOneClient', 'clientId', clientId)
            const localVarPath = `/clients/{clientId}`
                .replace(`{${"clientId"}}`, encodeURIComponent(String(clientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsControllerRemove: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('clientsControllerRemove', 'id', id)
            const localVarPath = `/clients/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} clientId
         * @param {CreateClientDto} createClientDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsControllerUpdateClient: async (clientId: number, createClientDto: CreateClientDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('clientsControllerUpdateClient', 'clientId', clientId)
            // verify required parameter 'createClientDto' is not null or undefined
            assertParamExists('clientsControllerUpdateClient', 'createClientDto', createClientDto)
            const localVarPath = `/clients/{clientId}`
                .replace(`{${"clientId"}}`, encodeURIComponent(String(clientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createClientDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClientesApi - functional programming interface
 * @export
 */
export const ClientesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ClientesApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {CreateClientDto} createClientDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientsControllerCreateClient(createClientDto: CreateClientDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientsControllerCreateClient201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientsControllerCreateClient(createClientDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientsControllerFindClients(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientsControllerFindClients200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientsControllerFindClients(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {number} clientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientsControllerFindOneClient(clientId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientsControllerCreateClient201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientsControllerFindOneClient(clientId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientsControllerRemove(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientsControllerRemove(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {number} clientId
         * @param {CreateClientDto} createClientDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clientsControllerUpdateClient(clientId: number, createClientDto: CreateClientDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientsControllerCreateClient201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clientsControllerUpdateClient(clientId, createClientDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ClientesApi - factory interface
 * @export
 */
export const ClientesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ClientesApiFp(configuration)
    return {
        /**
         *
         * @param {CreateClientDto} createClientDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsControllerCreateClient(createClientDto: CreateClientDto, options?: any): AxiosPromise<ClientsControllerCreateClient201Response> {
            return localVarFp.clientsControllerCreateClient(createClientDto, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsControllerFindClients(options?: any): AxiosPromise<ClientsControllerFindClients200Response> {
            return localVarFp.clientsControllerFindClients(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} clientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsControllerFindOneClient(clientId: number, options?: any): AxiosPromise<ClientsControllerCreateClient201Response> {
            return localVarFp.clientsControllerFindOneClient(clientId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsControllerRemove(id: string, options?: any): AxiosPromise<string> {
            return localVarFp.clientsControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} clientId
         * @param {CreateClientDto} createClientDto
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsControllerUpdateClient(clientId: number, createClientDto: CreateClientDto, options?: any): AxiosPromise<ClientsControllerCreateClient201Response> {
            return localVarFp.clientsControllerUpdateClient(clientId, createClientDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ClientesApi - object-oriented interface
 * @export
 * @class ClientesApi
 * @extends {BaseAPI}
 */
export class ClientesApi extends BaseAPI {
    /**
     *
     * @param {CreateClientDto} createClientDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientesApi
     */
    public clientsControllerCreateClient(createClientDto: CreateClientDto, options?: AxiosRequestConfig) {
        return ClientesApiFp(this.configuration).clientsControllerCreateClient(createClientDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientesApi
     */
    public clientsControllerFindClients(options?: AxiosRequestConfig) {
        return ClientesApiFp(this.configuration).clientsControllerFindClients(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {number} clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientesApi
     */
    public clientsControllerFindOneClient(clientId: number, options?: AxiosRequestConfig) {
        return ClientesApiFp(this.configuration).clientsControllerFindOneClient(clientId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientesApi
     */
    public clientsControllerRemove(id: string, options?: AxiosRequestConfig) {
        return ClientesApiFp(this.configuration).clientsControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {number} clientId
     * @param {CreateClientDto} createClientDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientesApi
     */
    public clientsControllerUpdateClient(clientId: number, createClientDto: CreateClientDto, options?: AxiosRequestConfig) {
        return ClientesApiFp(this.configuration).clientsControllerUpdateClient(clientId, createClientDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RegimenFiscalApi - axios parameter creator
 * @export
 */
export const RegimenFiscalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Obtener un listado de los regimen fiscales que existen en base de datos
         * @summary
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regimeControllerFindAllRegimes: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/regimes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} regimeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regimeControllerFindOneRegime: async (regimeId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'regimeId' is not null or undefined
            assertParamExists('regimeControllerFindOneRegime', 'regimeId', regimeId)
            const localVarPath = `/regimes/{regimeId}`
                .replace(`{${"regimeId"}}`, encodeURIComponent(String(regimeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RegimenFiscalApi - functional programming interface
 * @export
 */
export const RegimenFiscalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RegimenFiscalApiAxiosParamCreator(configuration)
    return {
        /**
         * Obtener un listado de los regimen fiscales que existen en base de datos
         * @summary
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async regimeControllerFindAllRegimes(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegimeControllerFindAllRegimes200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.regimeControllerFindAllRegimes(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {number} regimeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async regimeControllerFindOneRegime(regimeId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegimeControllerFindOneRegime200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.regimeControllerFindOneRegime(regimeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RegimenFiscalApi - factory interface
 * @export
 */
export const RegimenFiscalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RegimenFiscalApiFp(configuration)
    return {
        /**
         * Obtener un listado de los regimen fiscales que existen en base de datos
         * @summary
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regimeControllerFindAllRegimes(options?: any): AxiosPromise<RegimeControllerFindAllRegimes200Response> {
            return localVarFp.regimeControllerFindAllRegimes(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} regimeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regimeControllerFindOneRegime(regimeId: number, options?: any): AxiosPromise<RegimeControllerFindOneRegime200Response> {
            return localVarFp.regimeControllerFindOneRegime(regimeId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RegimenFiscalApi - object-oriented interface
 * @export
 * @class RegimenFiscalApi
 * @extends {BaseAPI}
 */
export class RegimenFiscalApi extends BaseAPI {
    /**
     * Obtener un listado de los regimen fiscales que existen en base de datos
     * @summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegimenFiscalApi
     */
    public regimeControllerFindAllRegimes(options?: AxiosRequestConfig) {
        return RegimenFiscalApiFp(this.configuration).regimeControllerFindAllRegimes(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {number} regimeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegimenFiscalApi
     */
    public regimeControllerFindOneRegime(regimeId: number, options?: AxiosRequestConfig) {
        return RegimenFiscalApiFp(this.configuration).regimeControllerFindOneRegime(regimeId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerCreate: async (body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('usersControllerCreate', 'body', body)
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerFindAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {number} userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerFindOne: async (userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('usersControllerFindOne', 'userId', userId)
            const localVarPath = `/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerRemove: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersControllerRemove', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUpdate: async (id: string, body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersControllerUpdate', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('usersControllerUpdate', 'body', body)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerCreate(body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerCreate(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerFindAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerFindAll(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {number} userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerFindOne(userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerFindOne(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerRemove(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerRemove(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} id
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerUpdate(id: string, body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerUpdate(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         *
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerCreate(body: object, options?: any): AxiosPromise<string> {
            return localVarFp.usersControllerCreate(body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerFindAll(options?: any): AxiosPromise<Array<User>> {
            return localVarFp.usersControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerFindOne(userId: number, options?: any): AxiosPromise<User> {
            return localVarFp.usersControllerFindOne(userId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerRemove(id: string, options?: any): AxiosPromise<string> {
            return localVarFp.usersControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {object} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUpdate(id: string, body: object, options?: any): AxiosPromise<string> {
            return localVarFp.usersControllerUpdate(id, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     *
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerCreate(body: object, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerCreate(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerFindAll(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {number} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerFindOne(userId: number, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerFindOne(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerRemove(id: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {string} id
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerUpdate(id: string, body: object, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerUpdate(id, body, options).then((request) => request(this.axios, this.basePath));
    }
}


